#!/bin/bash

# Aiex Release Environment Configuration
# This script is sourced by the release runtime to configure environment-specific settings

set -e

# Release information
export RELEASE_NAME="<%= @release.name %>"
export RELEASE_VERSION="<%= @release.version %>"
export RELEASE_NODE="<%= @release.node %>"
export RELEASE_COOKIE="<%= @release.cookie %>"

# Determine environment
if [[ -n "$KUBERNETES_SERVICE_HOST" ]]; then
    export RELEASE_ENVIRONMENT="kubernetes"
    export CLUSTER_ENABLED="true"
elif [[ -n "$DOCKER_HOST" ]]; then
    export RELEASE_ENVIRONMENT="docker"
    export CLUSTER_ENABLED="false"
else
    export RELEASE_ENVIRONMENT="standalone"
    export CLUSTER_ENABLED="false"
fi

echo "Starting Aiex release ${RELEASE_VERSION} in ${RELEASE_ENVIRONMENT} environment"

# Set the release root directory
RELEASE_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
export RELEASE_ROOT

# Kubernetes-specific configuration
if [[ "$RELEASE_ENVIRONMENT" == "kubernetes" ]]; then
    # Set node name from hostname if in Kubernetes
    if [[ -n "$HOSTNAME" ]]; then
        export RELEASE_NODE="${RELEASE_NAME}@${HOSTNAME}"
    fi
    
    # Configure cluster discovery
    export LIBCLUSTER_KUBERNETES_SELECTOR="app=aiex"
    export LIBCLUSTER_KUBERNETES_NODE_BASENAME="$RELEASE_NAME"
    
    # Memory configuration for container limits
    if [[ -n "$MEMORY_LIMIT_MB" ]]; then
        # Set Erlang memory allocation based on container limits
        # Reserve 20% for system overhead
        ERLANG_MEMORY_MB=$((MEMORY_LIMIT_MB * 80 / 100))
        export ERL_MAX_HEAP_SIZE="${ERLANG_MEMORY_MB}m"
    fi
    
    # Configure Mnesia for distributed storage
    export MNESIA_DIR="/app/data/mnesia"
    mkdir -p "$MNESIA_DIR"
    
    # Health check configuration
    export HEALTH_ENDPOINT_ENABLED="true"
    export HEALTH_PORT="${HEALTH_PORT:-8090}"
    
    # Telemetry configuration for cluster monitoring
    export PROMETHEUS_ENABLED="true"
    export PROMETHEUS_PORT="${PROMETHEUS_PORT:-9090}"
    export DASHBOARD_ENABLED="true"
    export DASHBOARD_PORT="${DASHBOARD_PORT:-8080}"
else
    # Create necessary directories for standalone/docker
    mkdir -p "$RELEASE_ROOT/data/mnesia"
    mkdir -p "$RELEASE_ROOT/log"
    mkdir -p "$RELEASE_ROOT/tmp"
    
    export MNESIA_DIR="$RELEASE_ROOT/data/mnesia"
fi

# Common directory setup
export AIEX_DATA_DIR="${AIEX_DATA_DIR:-$RELEASE_ROOT/data}"
export AIEX_LOG_DIR="${AIEX_LOG_DIR:-$RELEASE_ROOT/log}"
export AIEX_TMP_DIR="${AIEX_TMP_DIR:-$RELEASE_ROOT/tmp}"

# Docker-specific configuration
if [[ "$RELEASE_ENVIRONMENT" == "docker" ]]; then
    # Single-node optimizations
    export CLUSTER_ENABLED="false"
    export PERFORMANCE_MONITORING_ENABLED="true"
fi

# Standalone configuration
if [[ "$RELEASE_ENVIRONMENT" == "standalone" ]]; then
    export CLUSTER_ENABLED="false"
    export PERFORMANCE_MONITORING_ENABLED="true"
fi

# TUI configuration
export AIEX_TUI_PORT="${AIEX_TUI_PORT:-9487}"
export AIEX_OTP_HOST="${AIEX_OTP_HOST:-127.0.0.1}"

# Logging configuration
export LOG_LEVEL="${LOG_LEVEL:-info}"
export STRUCTURED_LOGGING="${STRUCTURED_LOGGING:-true}"

# LLM provider configuration (can be overridden)
export AIEX_OPENAI_API_KEY="${OPENAI_API_KEY:-}"
export AIEX_ANTHROPIC_API_KEY="${ANTHROPIC_API_KEY:-}"
export LLM_DEFAULT_PROVIDER="${LLM_DEFAULT_PROVIDER:-ollama}"
export LLM_DISTRIBUTED_COORDINATION="${LLM_DISTRIBUTED_COORDINATION:-$CLUSTER_ENABLED}"

# Security configuration
export AUDIT_LOGGING="${AUDIT_LOGGING:-true}"

# Phoenix/Web configuration
export SECRET_KEY_BASE="${SECRET_KEY_BASE:-$(openssl rand -base64 64 | tr -d '\n' 2>/dev/null || echo 'fallback_secret_key_base_for_development')}"
export PORT="${PORT:-4000}"
export HOST="${HOST:-0.0.0.0}"

# Performance tuning based on environment
if [[ "$RELEASE_ENVIRONMENT" == "kubernetes" ]]; then
    # Optimize for container environment
    export ERL_MAX_PORTS="65536"
    export ERL_SCHEDULERS_ONLINE="${SCHEDULERS_ONLINE:-$(nproc 2>/dev/null || echo 4)}"
    
    # Enable crash dumps in production for debugging
    export ERL_CRASH_DUMP="/app/logs/erl_crash.dump"
    mkdir -p "$(dirname "$ERL_CRASH_DUMP")" 2>/dev/null || true
else
    # Development/standalone optimizations
    export ERL_MAX_PORTS="32768"
fi

# Signal handling for graceful shutdown
export RELEASE_TMP="${RELEASE_TMP:-/tmp}"

# Custom application configuration
export AIEX_CLUSTER_ENABLED="$CLUSTER_ENABLED"
export AIEX_ENVIRONMENT="$RELEASE_ENVIRONMENT"

# Database/Mnesia configuration
export MNESIA_DC_DUMP_LIMIT="${MNESIA_DC_DUMP_LIMIT:-40}"
export MNESIA_DUMP_LOG_WRITE_THRESHOLD="${MNESIA_DUMP_LOG_WRITE_THRESHOLD:-1000}"

# Distributed Erlang configuration
if [[ "$CLUSTER_ENABLED" == "true" ]]; then
    # Configure distributed Erlang for cluster communication
    export ERL_DIST_PORT="${ERL_DIST_PORT:-9100}"
    export ERL_EPMD_PORT="${ERL_EPMD_PORT:-4369}"
    
    # Set distribution protocol
    export RELEASE_DISTRIBUTION="name"
    
    # Configure kernel networking
    export ERL_AFLAGS="-kernel inet_dist_listen_min $ERL_DIST_PORT inet_dist_listen_max $((ERL_DIST_PORT + 100))"
else
    # Configure for standalone
    export RELEASE_DISTRIBUTION="name"
    export RELEASE_NODE="${RELEASE_NODE:-aiex@127.0.0.1}"
fi

# Health and monitoring ports
export TELEMETRY_AGGREGATOR_ENABLED="${TELEMETRY_AGGREGATOR_ENABLED:-true}"
export RELEASE_MANAGEMENT_ENABLED="${RELEASE_MANAGEMENT_ENABLED:-true}"

# Resource monitoring
export MEMORY_CHECK_INTERVAL="${MEMORY_CHECK_INTERVAL:-30000}"
export PROCESS_COUNT_LIMIT="${PROCESS_COUNT_LIMIT:-50000}"

echo "Environment configuration completed for $RELEASE_ENVIRONMENT"
echo "Cluster mode: $CLUSTER_ENABLED"
echo "Node name: $RELEASE_NODE"
echo "Data directory: $MNESIA_DIR"

# Verify critical directories exist
for dir in "$AIEX_DATA_DIR" "$AIEX_LOG_DIR" "$AIEX_TMP_DIR"; do
    if [[ -n "$dir" ]] && [[ "$dir" != "/dev/null" ]]; then
        mkdir -p "$dir" 2>/dev/null || true
    fi
done

# Set file permissions for security
if [[ "$RELEASE_ENVIRONMENT" == "kubernetes" ]]; then
    # Ensure proper ownership in container
    chown -R "$(whoami)" "$MNESIA_DIR" 2>/dev/null || true
    chmod -R 755 "$MNESIA_DIR" 2>/dev/null || true
fi